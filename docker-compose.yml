services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: voidai-app
    ports:
      - 8080:8080
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/voidai_v2?authSource=admin
      - REDIS_URL=redis://redis:6379
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PROMETHEUS_ENABLED=true
      - METRICS_PORT=9090
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      cloudflared:
        condition: service_started
    networks:
      - voidai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongodb:
    image: mongo:latest
    container_name: voidai-mongodb
    restart: unless-stopped
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=voidai_v2
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - voidai-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 1s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: voidai-redis
    restart: unless-stopped
    ports:
      - 6379:6379
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis_data:/data
    networks:
      - voidai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  prometheus:
    image: prom/prometheus:latest
    container_name: voidai-prometheus
    restart: unless-stopped
    ports:
      - 9090:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - voidai-network
    depends_on:
      - app

  grafana:
    image: grafana/grafana:latest
    container_name: voidai-grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - voidai-network
    depends_on:
      - prometheus

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: voidai-tunnel
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    restart: unless-stopped
    networks:
      - voidai-network

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  voidai-network:
    driver: bridge